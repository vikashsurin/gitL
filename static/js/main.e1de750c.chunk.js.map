{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","href","id","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAgMeA,MA5Lf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SACb,4CACA,iCAAM,uBAAGC,KAAK,kCAAR,gBACN,4BACA,+BALJ,oBASE,yBAAKD,UAAU,QACb,kDACA,sHAIA,0CACA,6BAEA,+BACG,IADH,qEAlBJ,6BAwBE,yBAAKA,UAAU,OACb,0CACA,yHAIA,+CACkB,uCADlB,UAGA,6BACA,qEAEA,kHAIA,0CACA,6BAEA,+FA3CJ,kCAgDE,6BACE,0CACA,uLAKA,gEACA,6BAEA,gFAEE,6BACA,qCAHF,yBA1DJ,0CAiEE,6BACE,8CACA,iIAIA,4FACA,6BAEA,uFAEE,6BACA,yCAHF,yCA1EJ,gCAkFE,6BACE,yCACA,wEACA,2DACA,6BACA,yGAGE,6BACA,qCAJF,wBAKE,6BACA,yCANF,8DAQE,6BARF,2DAvFJ,kDAoGE,yBAAKE,GAAG,gBACN,4CACA,yBAAKA,GAAG,cACN,yBAAKC,IAAI,iHAAiHC,IAAI,UAC9H,uBAAGJ,UAAU,QAAb,okBAWA,6BACE,mDACA,kDACqB,yCADrB,UAGA,6BACA,+DAEA,2DACA,4CACA,6BACA,4DAEA,kEACA,oDACuB,yCADvB,UAGA,6BACA,iEAEF,yBAAKG,IAAI,gHAAgHC,IAAI,UAC7H,yBACED,IAAI,gHACJC,IAAI,UAEN,6BACE,uBAAGJ,UAAU,QAAb,+JAMA,uDAC0B,yCAD1B,UAGA,6BACA,qEAEA,gEAEA,uBAAGA,UAAU,QAAb,6DAGA,sDACA,qDACA,6BACA,4BACE,sDACA,8BAEF,qDACwB,yCADxB,UAGA,6BACA,mGAEE,6BACA,qCAHF,qBAMA,uBAAGA,UAAU,QAAb,yDACyD,IACvD,wCAFF,KAEwB,uCAFxB,uBCzKQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e1de750c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./style/app.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"start\">\n        <h1>Guide to git</h1>\n        <p>by <a href=\"https://github.com/vikashsurin\">vikashsurin</a></p>\n        <p></p>\n        <img />\n      </div>\n\n      --------xx-------\n      <div className=\"init\">\n        <h1>initialize project</h1>\n        <p>\n          Create new github repository in an existing project directory or new\n          project directory.\n        </p>\n        <code>git init</code>\n        <br />\n\n        <small>\n          {\" \"}\n          a file with .git extension is created, and is hidden by default.\n        </small>\n      </div>\n      -------------x------------\n      <div className=\"add\">\n        <h2>stage file</h2>\n        <p>\n          Now scan for new or existing modified files.Add them to stage, to be\n          commited permanently.\n        </p>\n        <code>\n          git add &#10094;<b>filename</b>&#10095;\n        </code>\n        <br />\n        <small>adds a single file , ex:- file.txt</small>\n\n        <p>\n          Files can be added one by one like shown above or all at one time like\n          shown below.\n        </p>\n        <code>git add.</code>\n        <br />\n\n        <small>\n          the . after add means, all the files in current directory .\n        </small>\n      </div>\n      ---------------x---------------\n      <div>\n        <h2>Commitment</h2>\n        <p>\n          Now permanently record the files, say commit files. Final task before\n          pushing.It will commit to the files which were being added in the\n          staging process.\n        </p>\n        <code>git commit -m 'commit message'</code>\n        <br />\n\n        <small>\n          commit the file or make it ready to be pushed.\n          <br />\n          <icode>-m</icode> stands for message.\n        </small>\n      </div>\n      -------------------xx------------------\n      <div>\n        <h2>Where to push?</h2>\n        <p>\n          Now the files are ready but where to push.Lets connect to a link,the\n          repository url or the server.\n        </p>\n        <code>git remote add origin https://github.com/username/repo.git</code>\n        <br />\n\n        <small>\n          the file will be sent via this url to the github repo\n          <br />\n          <icode>origin</icode>\n          is an alias , it is storing the url.\n        </small>\n      </div>\n      ---------------xxx-----------\n      <div>\n        <h2>Now push.</h2>\n        <p>Now push all the files to the repository.</p>\n        <code>git push -u origin master</code>\n        <br />\n        <small>\n          the file would be uploaded to the github repo, where the url points\n          to.\n          <br />\n          <icode>-u</icode> stands for untracked\n          <br />\n          <icode>origin</icode> means the current repo url.it is used as an\n          alias for url.\n          <br />\n          master is the default branch , Lets see branches next.\n        </small>\n      </div>\n      ----------------------xx-----------------------\n      <div id=\"branch-story\">\n        <h2>branch story</h2>\n        <div id=\"branch-img\">\n          <img src=\"https://images.pexels.com/photos/5158869/pexels-photo-5158869.png?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260\" alt=\"image\"/>\n          <p className=\"left\">\n            Have a look at the diagram and try to understand step by step.\n            Master is the default branch and main branch of any github repo.\n            Every app whether android, ios or web app, has a version.Yes the\n            actual verion like version 00.1. With the release of each version\n            bugs are fixed or features are added. But to fix bugs or work on new\n            features,one should not do in the master branch itself,rather\n            several branches can be created. This branches are just the copy of\n            the master,so that the developer can work on the copy and modify it\n            in isolation, without affecting the original code.\n          </p>\n          <div>\n            <h4>create a new branch</h4>\n            <code>\n              git branch &#10094;<b>branchname</b>&#10095;\n            </code>\n            <br />\n            <small>a new branch is created with</small>\n\n            <h5>---List all the branches---</h5>\n            <code>git branch</code>\n            <br />\n            <small>*master, branchX ,branchY</small>\n\n            <h5>---switch to a different branch---</h5>\n            <code>\n              git checkout &#10094;<b>branchname</b>&#10095;\n            </code>\n            <br />\n            <small>for ex:- git checkout branchX</small>\n          </div>\n          <img src=\"https://images.pexels.com/photos/5158367/pexels-photo-5158367.png?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\" alt=\"image\"/>\n          <img\n            src=\"https://images.pexels.com/photos/5158375/pexels-photo-5158375.png?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\n            alt=\"image\"\n          />\n          <div>\n            <p className=\"left\">\n              A branch is only available to you, unless you push it to repo so\n              that other can access it. By now we know how to stage(add), commit\n              and push. -Let`s push..\n            </p>\n\n            <code>\n              git push origin &#10094;<b>branchname</b>&#10095;\n            </code>\n            <br />\n            <small>pushed to custom branch not master</small>\n\n            <h4>Let`s see how to delete a branch</h4>\n\n            <p className=\"left\">\n              When the purpose of the branch is met, it can be deleted.\n            </p>\n            <h5>---switch to master---</h5>\n            <code>git checkout master</code>\n            <br />\n            <h5>\n              <s>---now delete branch---</s>\n              <br />\n            </h5>\n            <code>\n              git branch -d &#10094;<b>branchname</b>&#10095;\n            </code>\n            <br />\n            <small>\n              in order to delete a branch you must switch to other branch first\n              <br />\n              <icode>-d</icode>\n              stands for delete\n            </small>\n            <p className=\"left\">\n              But it does not end here, there are more concepts like{\" \"}\n              <small>merge</small>, <small>pull</small> and many more\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}